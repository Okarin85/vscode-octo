module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
  "use strict";

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  peg$SyntaxError.buildMessage = function(expected, found) {
    var DESCRIBE_EXPECTATION_FNS = {
          literal: function(expectation) {
            return "\"" + literalEscape(expectation.text) + "\"";
          },

          "class": function(expectation) {
            var escapedParts = "",
                i;

            for (i = 0; i < expectation.parts.length; i++) {
              escapedParts += expectation.parts[i] instanceof Array
                ? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
                : classEscape(expectation.parts[i]);
            }

            return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
          },

          any: function(expectation) {
            return "any character";
          },

          end: function(expectation) {
            return "end of input";
          },

          other: function(expectation) {
            return expectation.description;
          }
        };

    function hex(ch) {
      return ch.charCodeAt(0).toString(16).toUpperCase();
    }

    function literalEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/"/g,  '\\"')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function classEscape(s) {
      return s
        .replace(/\\/g, '\\\\')
        .replace(/\]/g, '\\]')
        .replace(/\^/g, '\\^')
        .replace(/-/g,  '\\-')
        .replace(/\0/g, '\\0')
        .replace(/\t/g, '\\t')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r')
        .replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
        .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
    }

    function describeExpectation(expectation) {
      return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
    }

    function describeExpected(expected) {
      var descriptions = new Array(expected.length),
          i, j;

      for (i = 0; i < expected.length; i++) {
        descriptions[i] = describeExpectation(expected[i]);
      }

      descriptions.sort();

      if (descriptions.length > 0) {
        for (i = 1, j = 1; i < descriptions.length; i++) {
          if (descriptions[i - 1] !== descriptions[i]) {
            descriptions[j] = descriptions[i];
            j++;
          }
        }
        descriptions.length = j;
      }

      switch (descriptions.length) {
        case 1:
          return descriptions[0];

        case 2:
          return descriptions[0] + " or " + descriptions[1];

        default:
          return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
      }
    }

    function describeFound(found) {
      return found ? "\"" + literalEscape(found) + "\"" : "end of input";
    }

    return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
  };

  function peg$parse(input, options) {
    options = options !== void 0 ? options : {};

    var peg$FAILED = {},

        peg$startRuleFunctions = { program: peg$parseprogram },
        peg$startRuleFunction  = peg$parseprogram,

        peg$c0 = function(body) { return { type: "Program", body: body, location: location() }; },
        peg$c1 = peg$otherExpectation("declaraction"),
        peg$c2 = function(op, one, two) { return { type: "Declaration", op: op, one: one, two: two, location: location() }; },
        peg$c3 = function(op, one, two) { return {type: "Declaration", op: op, one: one, two: two, location: location() }; },
        peg$c4 = ":",
        peg$c5 = peg$literalExpectation(":", false),
        peg$c6 = peg$otherExpectation("if statement"),
        peg$c7 = function(test, consequent, alternate) { return { type: "IfStatement", test: test, consequent: consequent, alternate: alternate, location: location() }; },
        peg$c8 = function(test, consequent) { return { type: "IfStatement", test: test, consequent: consequent, location: location() }; },
        peg$c9 = peg$otherExpectation("loop statement"),
        peg$c10 = function(body) { return { type: "LoopStatement", body: body, location: location() }; },
        peg$c11 = peg$otherExpectation("while statement"),
        peg$c12 = function(test) { return { type: "WhileStatement", test: test, location: location() }; },
        peg$c13 = peg$otherExpectation("test expression"),
        peg$c14 = function(one, op, two) { return { type: "TestExpression", one: one, op: op, two: two, location: location() }; },
        peg$c15 = "-",
        peg$c16 = peg$literalExpectation("-", false),
        peg$c17 = function(one, op) { return { type: "TestExpression", one: one, op: op, location: location() }; },
        peg$c18 = peg$otherExpectation("operator"),
        peg$c19 = peg$otherExpectation("comparison operator"),
        peg$c20 = "==",
        peg$c21 = peg$literalExpectation("==", false),
        peg$c22 = "!=",
        peg$c23 = peg$literalExpectation("!=", false),
        peg$c24 = "<=",
        peg$c25 = peg$literalExpectation("<=", false),
        peg$c26 = ">=",
        peg$c27 = peg$literalExpectation(">=", false),
        peg$c28 = "<",
        peg$c29 = peg$literalExpectation("<", false),
        peg$c30 = ">",
        peg$c31 = peg$literalExpectation(">", false),
        peg$c32 = peg$otherExpectation("assignment operator"),
        peg$c33 = ">>=",
        peg$c34 = peg$literalExpectation(">>=", false),
        peg$c35 = "<<=",
        peg$c36 = peg$literalExpectation("<<=", false),
        peg$c37 = "|=",
        peg$c38 = peg$literalExpectation("|=", false),
        peg$c39 = "&=",
        peg$c40 = peg$literalExpectation("&=", false),
        peg$c41 = "^=",
        peg$c42 = peg$literalExpectation("^=", false),
        peg$c43 = "-=",
        peg$c44 = peg$literalExpectation("-=", false),
        peg$c45 = "=-",
        peg$c46 = peg$literalExpectation("=-", false),
        peg$c47 = "+=",
        peg$c48 = peg$literalExpectation("+=", false),
        peg$c49 = ":=",
        peg$c50 = peg$literalExpectation(":=", false),
        peg$c51 = peg$otherExpectation("assignment expression"),
        peg$c52 = function(one, op, two) { return { type: "AssignmentExpression", op: op, one: one, two: two, location: location() }; },
        peg$c53 = function(op, one) { return { type: "RandomExpression", op: op, one: one, location: location(), }; },
        peg$c54 = function(op, one) { return { type: "AddressExpression", op: op, one: one, location: location() }; },
        peg$c55 = function(op) { return { type: "KeywordExpression",op: op, location: location() }; },
        peg$c56 = function(op, one) { return { type: "UnaryExpression", op: op, one: one, location: location() }; },
        peg$c57 = peg$otherExpectation("directive"),
        peg$c58 = function(op, one, two) { return {type: "Directive", op: op, one: one, two: two, location: location() }; },
        peg$c59 = function(op, one, two, three) { return {type: "Directive", op: op, one: one, two: two, three: three, location: location() }; },
        peg$c60 = peg$otherExpectation("number"),
        peg$c61 = function(number) { return { type: "Number", value: number, location: location() }; },
        peg$c62 = "0b",
        peg$c63 = peg$literalExpectation("0b", false),
        peg$c64 = /^[01]/,
        peg$c65 = peg$classExpectation(["0", "1"], false, false),
        peg$c66 = function(prefix, value) { return prefix + value.join(''); },
        peg$c67 = "0x",
        peg$c68 = peg$literalExpectation("0x", false),
        peg$c69 = /^[0-9a-fA-F]/,
        peg$c70 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false),
        peg$c71 = /^[0-9]/,
        peg$c72 = peg$classExpectation([["0", "9"]], false, false),
        peg$c73 = function(value) { return value.join(''); },
        peg$c74 = peg$otherExpectation("vregister or alias"),
        peg$c75 = peg$otherExpectation("v regiser"),
        peg$c76 = "v",
        peg$c77 = peg$literalExpectation("v", false),
        peg$c78 = function(register) { return { type: "vRegister", value: register.join(''), location: location() }; },
        peg$c79 = peg$otherExpectation("i regiser"),
        peg$c80 = "i",
        peg$c81 = peg$literalExpectation("i", false),
        peg$c82 = function(register) { return { type: "iRegister", value: register, location: location() }; },
        peg$c83 = peg$otherExpectation("label"),
        peg$c84 = /^[^ \t\r\n]/,
        peg$c85 = peg$classExpectation([" ", "\t", "\r", "\n"], true, false),
        peg$c86 = function(value) { return { type: "Label", value: value.join(''), location: location() }; },
        peg$c87 = "return",
        peg$c88 = peg$literalExpectation("return", false),
        peg$c89 = ";",
        peg$c90 = peg$literalExpectation(";", false),
        peg$c91 = "clear",
        peg$c92 = peg$literalExpectation("clear", false),
        peg$c93 = "bcd",
        peg$c94 = peg$literalExpectation("bcd", false),
        peg$c95 = "save",
        peg$c96 = peg$literalExpectation("save", false),
        peg$c97 = "load",
        peg$c98 = peg$literalExpectation("load", false),
        peg$c99 = "sprite",
        peg$c100 = peg$literalExpectation("sprite", false),
        peg$c101 = "jump",
        peg$c102 = peg$literalExpectation("jump", false),
        peg$c103 = "jump0",
        peg$c104 = peg$literalExpectation("jump0", false),
        peg$c105 = ":const",
        peg$c106 = peg$literalExpectation(":const", false),
        peg$c107 = ":alias",
        peg$c108 = peg$literalExpectation(":alias", false),
        peg$c109 = ":breakpoint",
        peg$c110 = peg$literalExpectation(":breakpoint", false),
        peg$c111 = ":unpack",
        peg$c112 = peg$literalExpectation(":unpack", false),
        peg$c113 = ":org",
        peg$c114 = peg$literalExpectation(":org", false),
        peg$c115 = ":next",
        peg$c116 = peg$literalExpectation(":next", false),
        peg$c117 = "hex",
        peg$c118 = peg$literalExpectation("hex", false),
        peg$c119 = "random",
        peg$c120 = peg$literalExpectation("random", false),
        peg$c121 = "key",
        peg$c122 = peg$literalExpectation("key", false),
        peg$c123 = "-key",
        peg$c124 = peg$literalExpectation("-key", false),
        peg$c125 = "delay",
        peg$c126 = peg$literalExpectation("delay", false),
        peg$c127 = function() { return { type: "delay", value: "delay", location: location() }; },
        peg$c128 = "buzzer",
        peg$c129 = peg$literalExpectation("buzzer", false),
        peg$c130 = function() { return { type: "buzzer", value: "buzzer", location: location() }; },
        peg$c131 = "if",
        peg$c132 = peg$literalExpectation("if", false),
        peg$c133 = "then",
        peg$c134 = peg$literalExpectation("then", false),
        peg$c135 = "else",
        peg$c136 = peg$literalExpectation("else", false),
        peg$c137 = "begin",
        peg$c138 = peg$literalExpectation("begin", false),
        peg$c139 = "end",
        peg$c140 = peg$literalExpectation("end", false),
        peg$c141 = "loop",
        peg$c142 = peg$literalExpectation("loop", false),
        peg$c143 = "again",
        peg$c144 = peg$literalExpectation("again", false),
        peg$c145 = "while",
        peg$c146 = peg$literalExpectation("while", false),
        peg$c147 = "hires",
        peg$c148 = peg$literalExpectation("hires", false),
        peg$c149 = "lores",
        peg$c150 = peg$literalExpectation("lores", false),
        peg$c151 = "scroll-down",
        peg$c152 = peg$literalExpectation("scroll-down", false),
        peg$c153 = "scroll-left",
        peg$c154 = peg$literalExpectation("scroll-left", false),
        peg$c155 = "scroll-right",
        peg$c156 = peg$literalExpectation("scroll-right", false),
        peg$c157 = "bighex",
        peg$c158 = peg$literalExpectation("bighex", false),
        peg$c159 = "exit",
        peg$c160 = peg$literalExpectation("exit", false),
        peg$c161 = "saveflags",
        peg$c162 = peg$literalExpectation("saveflags", false),
        peg$c163 = "loadflags",
        peg$c164 = peg$literalExpectation("loadflags", false),
        peg$c165 = "scroll-up",
        peg$c166 = peg$literalExpectation("scroll-up", false),
        peg$c167 = "plane",
        peg$c168 = peg$literalExpectation("plane", false),
        peg$c169 = "audio",
        peg$c170 = peg$literalExpectation("audio", false),
        peg$c171 = "long",
        peg$c172 = peg$literalExpectation("long", false),
        peg$c173 = peg$otherExpectation("trivia"),
        peg$c174 = function(trivia) { return { type: "Trivia", value: trivia.join(''), location: location() }; },
        peg$c175 = peg$otherExpectation("comment"),
        peg$c176 = "#",
        peg$c177 = peg$literalExpectation("#", false),
        peg$c178 = /^[^\n]/,
        peg$c179 = peg$classExpectation(["\n"], true, false),
        peg$c180 = function(start, rest) { return start + rest.join(''); },
        peg$c181 = peg$otherExpectation("whitespace"),
        peg$c182 = /^[ \t\r\n]/,
        peg$c183 = peg$classExpectation([" ", "\t", "\r", "\n"], false, false),
        peg$c184 = function(whitespace) { return whitespace.join(''); },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1 }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildStructuredError(
        [peg$otherExpectation(description)],
        input.substring(peg$savedPos, peg$currPos),
        location
      );
    }

    function error(message, location) {
      location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)

      throw peg$buildSimpleError(message, location);
    }

    function peg$literalExpectation(text, ignoreCase) {
      return { type: "literal", text: text, ignoreCase: ignoreCase };
    }

    function peg$classExpectation(parts, inverted, ignoreCase) {
      return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }

    function peg$anyExpectation() {
      return { type: "any" };
    }

    function peg$endExpectation() {
      return { type: "end" };
    }

    function peg$otherExpectation(description) {
      return { type: "other", description: description };
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos], p;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column
        };

        while (p < pos) {
          if (input.charCodeAt(p) === 10) {
            details.line++;
            details.column = 1;
          } else {
            details.column++;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildSimpleError(message, location) {
      return new peg$SyntaxError(message, null, null, location);
    }

    function peg$buildStructuredError(expected, found, location) {
      return new peg$SyntaxError(
        peg$SyntaxError.buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseprogram() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsestatement();
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parsestatement();
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c0(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestatement() {
      var s0;

      s0 = peg$parseloopStatement();
      if (s0 === peg$FAILED) {
        s0 = peg$parseifStatement();
        if (s0 === peg$FAILED) {
          s0 = peg$parseunaryExpression();
          if (s0 === peg$FAILED) {
            s0 = peg$parseassignmentExpression();
            if (s0 === peg$FAILED) {
              s0 = peg$parsedeclaration();
              if (s0 === peg$FAILED) {
                s0 = peg$parsedirective();
                if (s0 === peg$FAILED) {
                  s0 = peg$parselabel();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsekeywordExpression();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsenumber();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parse_();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsedeclaration() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseconstKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselabel();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c2(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsealiasKeyword();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parselabel();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsealiasable();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c3(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s1 = peg$c4;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parselabel();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = [];
                  s6 = peg$parsestatement();
                  while (s6 !== peg$FAILED) {
                    s5.push(s6);
                    s6 = peg$parsestatement();
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    s7 = peg$parsereturnKeyword();
                    while (s7 !== peg$FAILED) {
                      s6.push(s7);
                      s7 = peg$parsereturnKeyword();
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c2(s1, s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c1); }
      }

      return s0;
    }

    function peg$parseifStatement() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseifKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetestExpression();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsebeginKeyword();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = [];
                  s8 = peg$parsestatement();
                  if (s8 === peg$FAILED) {
                    s8 = peg$parsereturnKeyword();
                  }
                  while (s8 !== peg$FAILED) {
                    s7.push(s8);
                    s8 = peg$parsestatement();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parsereturnKeyword();
                    }
                  }
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parseelseKeyword();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parse_();
                      if (s9 !== peg$FAILED) {
                        s10 = [];
                        s11 = peg$parsestatement();
                        if (s11 === peg$FAILED) {
                          s11 = peg$parsereturnKeyword();
                        }
                        while (s11 !== peg$FAILED) {
                          s10.push(s11);
                          s11 = peg$parsestatement();
                          if (s11 === peg$FAILED) {
                            s11 = peg$parsereturnKeyword();
                          }
                        }
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parseendKeyword();
                          if (s11 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c7(s3, s7, s10);
                            s0 = s1;
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseifKeyword();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsetestExpression();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsebeginKeyword();
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = [];
                    s8 = peg$parsestatement();
                    if (s8 === peg$FAILED) {
                      s8 = peg$parsereturnKeyword();
                    }
                    while (s8 !== peg$FAILED) {
                      s7.push(s8);
                      s8 = peg$parsestatement();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsereturnKeyword();
                      }
                    }
                    if (s7 !== peg$FAILED) {
                      s8 = peg$parseendKeyword();
                      if (s8 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c8(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseifKeyword();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsetestExpression();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsethenKeyword();
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    if (s6 !== peg$FAILED) {
                      s7 = [];
                      s8 = peg$parsestatement();
                      if (s8 === peg$FAILED) {
                        s8 = peg$parsereturnKeyword();
                      }
                      while (s8 !== peg$FAILED) {
                        s7.push(s8);
                        s8 = peg$parsestatement();
                        if (s8 === peg$FAILED) {
                          s8 = peg$parsereturnKeyword();
                        }
                      }
                      if (s7 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c8(s3, s7);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c6); }
      }

      return s0;
    }

    function peg$parseloopStatement() {
      var s0, s1, s2, s3, s4;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseloopKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parsewhileStatement();
          if (s4 === peg$FAILED) {
            s4 = peg$parsestatement();
            if (s4 === peg$FAILED) {
              s4 = peg$parsereturnKeyword();
            }
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parsewhileStatement();
            if (s4 === peg$FAILED) {
              s4 = peg$parsestatement();
              if (s4 === peg$FAILED) {
                s4 = peg$parsereturnKeyword();
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseagainKeyword();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c10(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parsewhileStatement() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsewhileKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetestExpression();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c12(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c11); }
      }

      return s0;
    }

    function peg$parsetestExpression() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsealiasable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsecomparisonOperator();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 === peg$FAILED) {
                s5 = peg$parsealiasable();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c14(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsealiasable();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsekeyKeyword();
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 45) {
                s4 = peg$c15;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c16); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parsekeyKeyword();
                if (s5 !== peg$FAILED) {
                  s4 = [s4, s5];
                  s3 = s4;
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c17(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }

      return s0;
    }

    function peg$parseoperator() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsecomparisonOperator();
      if (s0 === peg$FAILED) {
        s0 = peg$parseassignmentOperator();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c18); }
      }

      return s0;
    }

    function peg$parsecomparisonOperator() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s0 = peg$c20;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c22) {
          s0 = peg$c22;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c24) {
            s0 = peg$c24;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c25); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c26) {
              s0 = peg$c26;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c27); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 60) {
                s0 = peg$c28;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c29); }
              }
              if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 62) {
                  s0 = peg$c30;
                  peg$currPos++;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c31); }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c19); }
      }

      return s0;
    }

    function peg$parseassignmentOperator() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c33) {
        s0 = peg$c33;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c34); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c35) {
          s0 = peg$c35;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c36); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c37) {
            s0 = peg$c37;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c38); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c39) {
              s0 = peg$c39;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c40); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c41) {
                s0 = peg$c41;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c42); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c43) {
                  s0 = peg$c43;
                  peg$currPos += 2;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c44); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c45) {
                    s0 = peg$c45;
                    peg$currPos += 2;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c47) {
                      s0 = peg$c47;
                      peg$currPos += 2;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c48); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c49) {
                        s0 = peg$c49;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c50); }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }

      return s0;
    }

    function peg$parseassignmentExpression() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsealiasable();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c35) {
              s3 = peg$c35;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c36); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c37) {
                s3 = peg$c37;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c38); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c39) {
                  s3 = peg$c39;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c40); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c41) {
                    s3 = peg$c41;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c42); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c43) {
                      s3 = peg$c43;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c44); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c45) {
                        s3 = peg$c45;
                        peg$currPos += 2;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c46); }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsealiasable();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c52(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsealiasable();
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c47) {
              s3 = peg$c47;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c48); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                s5 = peg$parsenumber();
                if (s5 === peg$FAILED) {
                  s5 = peg$parsealiasable();
                }
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c52(s1, s3, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsealiasable();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c49) {
                s3 = peg$c49;
                peg$currPos += 2;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c50); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsenumber();
                  if (s5 === peg$FAILED) {
                    s5 = peg$parsealiasable();
                    if (s5 === peg$FAILED) {
                      s5 = peg$parsedelayKeyword();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parserandomExpression();
                        if (s5 === peg$FAILED) {
                          s5 = peg$parsekeyKeyword();
                        }
                      }
                    }
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c52(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseiRegister();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c47) {
                  s3 = peg$c47;
                  peg$currPos += 2;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c48); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsealiasable();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c52(s1, s3, s5);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseiRegister();
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c49) {
                    s3 = peg$c49;
                    peg$currPos += 2;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c50); }
                  }
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseaddress();
                      if (s5 === peg$FAILED) {
                        s5 = peg$parseaddressExpression();
                      }
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c52(s1, s3, s5);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsebuzzerKeyword();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsedelayKeyword();
                }
                if (s1 !== peg$FAILED) {
                  s2 = peg$parse_();
                  if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c49) {
                      s3 = peg$c49;
                      peg$currPos += 2;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c50); }
                    }
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parse_();
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parsealiasable();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c52(s1, s3, s5);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              }
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c51); }
      }

      return s0;
    }

    function peg$parserandomExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parserandomKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaddress();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c53(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseaddressExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parselongKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaddress();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c54(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsehexKeyword();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebigHexKeyword();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsealiasable();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c54(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsekeywordExpression() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parseaudioKeyword();
      if (s1 === peg$FAILED) {
        s1 = peg$parsescrollLeftKeyword();
        if (s1 === peg$FAILED) {
          s1 = peg$parsescrollRightKeyword();
          if (s1 === peg$FAILED) {
            s1 = peg$parseclearKeyword();
            if (s1 === peg$FAILED) {
              s1 = peg$parsebreakpointKeyword();
              if (s1 === peg$FAILED) {
                s1 = peg$parsehiresKeyword();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseloresKeyword();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseexitKeyword();
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c55(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseunaryExpression() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parserandomKeyword();
      if (s1 === peg$FAILED) {
        s1 = peg$parsehexKeyword();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebigHexKeyword();
          if (s1 === peg$FAILED) {
            s1 = peg$parsebcdKeyword();
            if (s1 === peg$FAILED) {
              s1 = peg$parsesaveKeyword();
              if (s1 === peg$FAILED) {
                s1 = peg$parseloadKeyword();
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsealiasable();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c56(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselongKeyword();
        if (s1 === peg$FAILED) {
          s1 = peg$parseorgKeyword();
          if (s1 === peg$FAILED) {
            s1 = peg$parsejumpKeyword();
            if (s1 === peg$FAILED) {
              s1 = peg$parsejumpZeroKeyword();
              if (s1 === peg$FAILED) {
                s1 = peg$parsesaveKeyword();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseloadKeyword();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsescrollUpKeyword();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsescrollDownKeyword();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseplaneKeyword();
                      }
                    }
                  }
                }
              }
            }
          }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseaddress();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c56(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parsedirective() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseunpackKeyword();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseaddress();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parselabel();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c58(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesaveKeyword();
        if (s1 === peg$FAILED) {
          s1 = peg$parseloadKeyword();
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsealiasable();
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (s4 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s5 = peg$c15;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$parsealiasable();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c58(s1, s3, s7);
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenextKeyword();
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
              s3 = peg$parselabel();
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsestatement();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c58(s1, s3, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsespriteKeyword();
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsealiasable();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parsealiasable();
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parse_();
                      if (s6 !== peg$FAILED) {
                        s7 = peg$parseaddress();
                        if (s7 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c59(s1, s3, s5, s7);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }

      return s0;
    }

    function peg$parseaddress() {
      var s0;

      s0 = peg$parsenumber();
      if (s0 === peg$FAILED) {
        s0 = peg$parselabel();
      }

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsebinary();
      if (s1 === peg$FAILED) {
        s1 = peg$parsehex();
        if (s1 === peg$FAILED) {
          s1 = peg$parsedecimal();
        }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c61(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c60); }
      }

      return s0;
    }

    function peg$parsebinary() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c62) {
        s1 = peg$c62;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c63); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c64.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c65); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c64.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c65); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c66(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsehex() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c67) {
        s1 = peg$c67;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c69.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c70); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c66(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsedecimal() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c71.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c72); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c71.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c72); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c73(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsealiasable() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parsevRegister();
      if (s0 === peg$FAILED) {
        s0 = peg$parselabel();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c74); }
      }

      return s0;
    }

    function peg$parsevRegister() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 118) {
        s2 = peg$c76;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s2 !== peg$FAILED) {
        if (peg$c69.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c70); }
        }
        if (s3 !== peg$FAILED) {
          s2 = [s2, s3];
          s1 = s2;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c78(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }

      return s0;
    }

    function peg$parseiRegister() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 105) {
        s1 = peg$c80;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c81); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c82(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c79); }
      }

      return s0;
    }

    function peg$parselabel() {
      var s0, s1, s2, s3, s4, s5;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      s3 = peg$parsereservedWord();
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        peg$silentFails++;
        s5 = peg$parse_();
        peg$silentFails--;
        if (s5 !== peg$FAILED) {
          peg$currPos = s4;
          s4 = void 0;
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parse_();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          if (peg$c84.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c85); }
          }
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              if (peg$c84.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c85); }
              }
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c86(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }

      return s0;
    }

    function peg$parsereservedWord() {
      var s0;

      s0 = peg$parsekeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenumber();
        if (s0 === peg$FAILED) {
          s0 = peg$parsevRegister();
          if (s0 === peg$FAILED) {
            s0 = peg$parseiRegister();
            if (s0 === peg$FAILED) {
              s0 = peg$parseoperator();
            }
          }
        }
      }

      return s0;
    }

    function peg$parsekeyword() {
      var s0;

      s0 = peg$parsecolonKeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsereturnKeyword();
        if (s0 === peg$FAILED) {
          s0 = peg$parseclearKeyword();
          if (s0 === peg$FAILED) {
            s0 = peg$parsebcdKeyword();
            if (s0 === peg$FAILED) {
              s0 = peg$parsesaveKeyword();
              if (s0 === peg$FAILED) {
                s0 = peg$parseloadKeyword();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsespriteKeyword();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parsejumpKeyword();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsejumpZeroKeyword();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseconstKeyword();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parsealiasKeyword();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsebreakpointKeyword();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsehexKeyword();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsebigHexKeyword();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsekeyKeyword();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parsenotKeyKeyword();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parserandomKeyword();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsedelayKeyword();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsebuzzerKeyword();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsescrollKeyword();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsehiresKeyword();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseloresKeyword();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parseexitKeyword();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsesaveflagsKeyword();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parseloadflagsKeyword();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseaudioKeyword();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parseplaneKeyword();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parselongKeyword();
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$parseunpackKeyword();
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$parseifKeyword();
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$parsethenKeyword();
                                                                  if (s0 === peg$FAILED) {
                                                                    s0 = peg$parseelseKeyword();
                                                                    if (s0 === peg$FAILED) {
                                                                      s0 = peg$parsebeginKeyword();
                                                                      if (s0 === peg$FAILED) {
                                                                        s0 = peg$parseendKeyword();
                                                                        if (s0 === peg$FAILED) {
                                                                          s0 = peg$parseorgKeyword();
                                                                          if (s0 === peg$FAILED) {
                                                                            s0 = peg$parsenextKeyword();
                                                                            if (s0 === peg$FAILED) {
                                                                              s0 = peg$parseloopKeyword();
                                                                              if (s0 === peg$FAILED) {
                                                                                s0 = peg$parsewhileKeyword();
                                                                                if (s0 === peg$FAILED) {
                                                                                  s0 = peg$parseagainKeyword();
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsecolonKeyword() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 58) {
        s0 = peg$c4;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }

      return s0;
    }

    function peg$parsereturnKeyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c87) {
        s0 = peg$c87;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 59) {
          s0 = peg$c89;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
      }

      return s0;
    }

    function peg$parseclearKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c91) {
        s0 = peg$c91;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }

      return s0;
    }

    function peg$parsebcdKeyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c93) {
        s0 = peg$c93;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }

      return s0;
    }

    function peg$parsesaveKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c95) {
        s0 = peg$c95;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c96); }
      }

      return s0;
    }

    function peg$parseloadKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c97) {
        s0 = peg$c97;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c98); }
      }

      return s0;
    }

    function peg$parsespriteKeyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c99) {
        s0 = peg$c99;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }

      return s0;
    }

    function peg$parsejumpKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c101) {
        s0 = peg$c101;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }

      return s0;
    }

    function peg$parsejumpZeroKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c103) {
        s0 = peg$c103;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c104); }
      }

      return s0;
    }

    function peg$parseconstKeyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c105) {
        s0 = peg$c105;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }

      return s0;
    }

    function peg$parsealiasKeyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c107) {
        s0 = peg$c107;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }

      return s0;
    }

    function peg$parsebreakpointKeyword() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c109) {
        s0 = peg$c109;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }

      return s0;
    }

    function peg$parseunpackKeyword() {
      var s0;

      if (input.substr(peg$currPos, 7) === peg$c111) {
        s0 = peg$c111;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }

      return s0;
    }

    function peg$parseorgKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c113) {
        s0 = peg$c113;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c114); }
      }

      return s0;
    }

    function peg$parsenextKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c115) {
        s0 = peg$c115;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }

      return s0;
    }

    function peg$parsehexKeyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c117) {
        s0 = peg$c117;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c118); }
      }

      return s0;
    }

    function peg$parserandomKeyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c119) {
        s0 = peg$c119;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c120); }
      }

      return s0;
    }

    function peg$parsekeyKeyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c121) {
        s0 = peg$c121;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }

      return s0;
    }

    function peg$parsenotKeyKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c123) {
        s0 = peg$c123;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c124); }
      }

      return s0;
    }

    function peg$parsedelayKeyword() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c125) {
        s1 = peg$c125;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c127();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsebuzzerKeyword() {
      var s0, s1;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6) === peg$c128) {
        s1 = peg$c128;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c129); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c130();
      }
      s0 = s1;

      return s0;
    }

    function peg$parsescrollKeyword() {
      var s0;

      s0 = peg$parsescrollDownKeyword();
      if (s0 === peg$FAILED) {
        s0 = peg$parsescrollUpKeyword();
        if (s0 === peg$FAILED) {
          s0 = peg$parsescrollLeftKeyword();
          if (s0 === peg$FAILED) {
            s0 = peg$parsescrollRightKeyword();
          }
        }
      }

      return s0;
    }

    function peg$parseifKeyword() {
      var s0;

      if (input.substr(peg$currPos, 2) === peg$c131) {
        s0 = peg$c131;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }

      return s0;
    }

    function peg$parsethenKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c133) {
        s0 = peg$c133;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c134); }
      }

      return s0;
    }

    function peg$parseelseKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c135) {
        s0 = peg$c135;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c136); }
      }

      return s0;
    }

    function peg$parsebeginKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c137) {
        s0 = peg$c137;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c138); }
      }

      return s0;
    }

    function peg$parseendKeyword() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c139) {
        s0 = peg$c139;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c140); }
      }

      return s0;
    }

    function peg$parseloopKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c141) {
        s0 = peg$c141;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c142); }
      }

      return s0;
    }

    function peg$parseagainKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c143) {
        s0 = peg$c143;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c144); }
      }

      return s0;
    }

    function peg$parsewhileKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c145) {
        s0 = peg$c145;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c146); }
      }

      return s0;
    }

    function peg$parsehiresKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c147) {
        s0 = peg$c147;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c148); }
      }

      return s0;
    }

    function peg$parseloresKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c149) {
        s0 = peg$c149;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c150); }
      }

      return s0;
    }

    function peg$parsescrollDownKeyword() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c151) {
        s0 = peg$c151;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c152); }
      }

      return s0;
    }

    function peg$parsescrollLeftKeyword() {
      var s0;

      if (input.substr(peg$currPos, 11) === peg$c153) {
        s0 = peg$c153;
        peg$currPos += 11;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c154); }
      }

      return s0;
    }

    function peg$parsescrollRightKeyword() {
      var s0;

      if (input.substr(peg$currPos, 12) === peg$c155) {
        s0 = peg$c155;
        peg$currPos += 12;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c156); }
      }

      return s0;
    }

    function peg$parsebigHexKeyword() {
      var s0;

      if (input.substr(peg$currPos, 6) === peg$c157) {
        s0 = peg$c157;
        peg$currPos += 6;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c158); }
      }

      return s0;
    }

    function peg$parseexitKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c159) {
        s0 = peg$c159;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c160); }
      }

      return s0;
    }

    function peg$parsesaveflagsKeyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c161) {
        s0 = peg$c161;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c162); }
      }

      return s0;
    }

    function peg$parseloadflagsKeyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c163) {
        s0 = peg$c163;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c164); }
      }

      return s0;
    }

    function peg$parsescrollUpKeyword() {
      var s0;

      if (input.substr(peg$currPos, 9) === peg$c165) {
        s0 = peg$c165;
        peg$currPos += 9;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c166); }
      }

      return s0;
    }

    function peg$parseplaneKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c167) {
        s0 = peg$c167;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c168); }
      }

      return s0;
    }

    function peg$parseaudioKeyword() {
      var s0;

      if (input.substr(peg$currPos, 5) === peg$c169) {
        s0 = peg$c169;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c170); }
      }

      return s0;
    }

    function peg$parselongKeyword() {
      var s0;

      if (input.substr(peg$currPos, 4) === peg$c171) {
        s0 = peg$c171;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c172); }
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parsecomment();
      if (s2 === peg$FAILED) {
        s2 = peg$parsews();
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$parsecomment();
          if (s2 === peg$FAILED) {
            s2 = peg$parsews();
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c174(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c173); }
      }

      return s0;
    }

    function peg$parsecomment() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 35) {
        s1 = peg$c176;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c177); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c178.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c179); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c178.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c179); }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c180(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c175); }
      }

      return s0;
    }

    function peg$parsews() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c182.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c183); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c182.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c183); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c184(s1);
      }
      s0 = s1;
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c181); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail(peg$endExpectation());
      }

      throw peg$buildStructuredError(
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
